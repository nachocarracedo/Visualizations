#!/usr/bin/env python

import numpy as np
import pandas as pd

import requests
import warnings

# viz imports
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.dates as mdates
plt.style.use('fivethirtyeight')
plt.rcParams['axes.facecolor'] = 'white'
warnings.filterwarnings('ignore')

# email imports
import smtplib
import mimetypes
from email.mime.multipart import MIMEMultipart
from email.mime.image import MIMEImage
 
# cluster description. To be filled up by user.
Xnodes_5gen = ['PHSISILON2-1','PHSISILON2-2','PHSISILON2-3','PHSISILON2-4','PHSISILON2-7',
               'PHSISILON2-8','PHSISILON2-9','PHSISILON2-10','PHSISILON2-11','PHSISILON2-12',
               'PHSISILON2-13','PHSISILON2-15','PHSISILON2-16','PHSISILON2-17','PHSISILON2-18',
               'PHSISILON2-19','PHSISILON2-20','PHSISILON2-21','PHSISILON2-22',
               'PHSISILON2-23','PHSISILON2-24','PHSISILON2-25','PHSISILON2-26']

# find n cores using 'isi_hw_status| grep -i proc'
X5gen_cores = 16
isilon_script_output_path = '//xxxxxx/scripts_output/loads_new.txt'


def generate_plots(nodes, cores, path_output):

    numbernodes = len(nodes)
    # load data generated by bash script on Isilon:
    # date=`date | awk '{print $2" "$3" "$4}'`; isi_for_array -x5,6 -X -s "uptime | cut -d, -f 6" | sed 's/:/,/' |
    # while read line; do echo $date, $line; done >> /ifs/data/Isilon_Support/scripts/scripts_output/loads_new.txt
    loads = pd.read_csv(path_output,
                        header=None,
                        names=['Date','Node','Load'])

    loads['Date'] = pd.to_datetime(loads['Date'], format = '%b %d %H:%M:%S %Y')
    loads['Node'] = loads['Node'].map(lambda x: x.strip())
    loads['Load'] = loads['Load'] / cores

    #loads['hour']=loads['date'].dt.hour
    #loads['minute']=loads['date'].dt.minute
    #loads['time'] = str(loads['hour']) + ':' + str(loads['minute'])

    # plot cumulative
    fig =  plt.figure(figsize=(14,13),facecolor='white')

    # set up grid
    ax1=plt.subplot2grid((2,1), (0,0))
    plt.title("\n\nIsilonGP2 [X gen5 nodes] - LOADS Cumulative [SCALED]",
              size=16,
              fontweight = 'bold')
    # plot lines for all nodes
    for node in nodes:
        loads_node = loads[loads['Node'] == node]
        v = ax1.plot(loads_node['Date'],loads_node['Load'],
                     linewidth=1,
                     alpha=0.8)    
    # add threaholds lines    
    ax1.axhline(y=1,c="orange",linewidth=2,zorder=1) 
    ax1.axhline(y=1.25,c="red",linewidth=2,zorder=1)  

    xticks = ax1.xaxis.get_major_ticks()
    yticks = ax1.yaxis.get_major_ticks()
    for i in range(6,len(yticks)):
        yticks[i].label1.set_visible(False)
    yticks[0].label1.set_visible(False)
    xfmt = mdates.DateFormatter('%m/%d')
    ax1.xaxis.set_major_formatter(xfmt)
        
    plt.legend(nodes, prop={'size':12}, loc=0, ncol=5)
    plt.ylim([0,1.75])
       
    # plot 24 hours

    # create 24 hours dataframe
    loads24 = loads.iloc[-(24 * 4 * numbernodes):]
    # set up grid
    ax2=plt.subplot2grid((2,1), (1,0))
    plt.title("\n\nIsilonGP2 [X gen5 nodes] - LOADS 24H [SCALED]",
              size=16,
              fontweight = 'bold')
    # plot lines for all nodes
    for node in nodes:
        loads_node = loads[loads['Node'] == node]
        v = ax2.plot(loads_node['Date'],loads_node['Load'],
                     linewidth=1,
                     alpha=0.8)
    # add threaholds lines     
    ax2.axhline(y=1,c="orange",linewidth=2,zorder=1) 
    ax2.axhline(y=1.25,c="red",linewidth=2,zorder=1)  

    xfmt = mdates.DateFormatter('%H:%M')
    ax2.xaxis.set_major_formatter(xfmt)
    xticks = ax2.xaxis.get_major_ticks()
    yticks = ax2.yaxis.get_major_ticks()
    for i in range(6,len(yticks)):
        yticks[i].label1.set_visible(False)
    yticks[0].label1.set_visible(False)
        
    plt.legend(nodes, prop={'size':12}, loc=0, ncol=5)
    plt.ylim([0,1.75])   


    plt.savefig('C:/Users/xxxx/Desktop/isilon_reporting/Isilon_GP2_Loads_new.png',
                facecolor=fig.get_facecolor(),
                transparent=True,
                bbox_inches='tight')


def send_mail():

    fileToSend1 = 'C:/Users/xxxx/Desktop/isilon_reporting/Isilon_xxx_Loads_new.png'

    #recipients = ['icarracedo@xxxxxxxx.yyy']

    msg = MIMEMultipart()
    msg["From"] = "IsilonLoadsScript@partners.org"
    msg["To"] = ", ".join(recipients)
    msg["Subject"] = "GP2 Isilon LOADS since last node change(02/26/17)"

    ctype1, encoding1 = mimetypes.guess_type(fileToSend1)
    if ctype1 is None or encoding1 is not None:
        ctype1 = "application/octet-stream"             
    maintype1, subtype1 = ctype1.split("/", 1)
    fp = open(fileToSend1, "rb")
    attachment1 = MIMEImage(fp.read(), _subtype=subtype1)
    fp.close()
    attachment1.add_header("Content-Disposition", "attachment", filename=fileToSend1)
    msg.attach(attachment1)

    server = smtplib.SMTP("smtp.partners.org")#:587")
    server.starttls()
    server.sendmail(msg["From"], recipients, msg.as_string())    
    server.quit()


if __name__=='__main__':
    generate_plots(Xnodes_5gen, X5gen_cores, isilon_script_output_path)
    send_mail()





